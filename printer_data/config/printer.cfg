# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v2.0. To use this config, the firmware should be compiled for the
# STM32F103 with a "28KiB bootloader" and USB communication. Also,
# select "Enable extra low-level configuration options" and configure
# "GPIO pins to set at micro-controller startup" to "!PA14".

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40.07
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 39.97
endstop_pin: ^PC1
position_endstop: 0
position_max: 235
position_min: -40
position_endstop: -14
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0.0
position_max: 250
position_min: -2

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: PB4
enable_pin: !PD2
microsteps: 16
rotation_distance: 7.945
nozzle_diameter: 0.400
filament_diameter: 1.750
#full_steps_per_rotation: 400
#max_extrude_only_velocity: 2000
pressure_advance: 0.054
max_extrude_cross_section: 1
heater_pin: PC8
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PA0
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 250


[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
stealthchop_threshold: 999999

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC3
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[heater_fan heatbreak_cooling_fan]
#[fan_generic heatbreak_cooling_fan]
pin: PC7
heater: extruder
heater_temp: 50.0
fan_speed: 1

[fan]
pin: PC6
hardware_pwm: false
#kick_start_time: 0.5
#max_power: 0.9
off_below: 0.05
#cycle_time: 0.015

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

#[fan_generic case_fan]
#pin: rpi:pwmchip0/pwm0
#max_power: 0.95
#cycle_time: 0.00004 #0.01
#hardware_pwm: True
#kick_start_time: 0.150
#off_below: 0.05

#[temperature_fan MCU_fan]
#sensor_type: temperature_host #This is what the Pi3's Temperature sensor is known as.
#pin: rpi:pwmchip0/pwm0        #Set this to your fan pin
#max_temp: 80.0                #Set below 85C, Pi3+ MCU can be damaged at 85C
#target_temp: 49.0             #Set this to your preferred running temperature
#min_temp: 0
#shutdown_speed: 0.0
#kick_start_time: 0.5
#off_below: 0.19
#max_speed: 1.0
#min_speed: 0.0
#control: pid
#pid_Kp: 2.0
#pid_Ki: 5.0
#pid_Kd: 0.5
#pid_deriv_time: 2.0

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_32FFD7054246303405650857-if00

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100, 100, 20  # an example
    
[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[firmware_retraction]
retract_length: 0.5
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 35
#   The speed of retraction, in mm/s. The default is 20 mm/s.
#unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 35
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[static_digital_output usb_pullup_enable]
pins: !PA14

[board_pins]
aliases:
;    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8,  EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>,
    # 
    TFT_TX=PA2,  TFT_RX=PA3

# See the sample-lcd.cfg file for definitions of common LCD displays.

[neopixel neo]
pin: PA8
chain_count: 22
color_order: GRBW
initial_RED: 1
initial_GREEN: 0
initial_BLUE: 0

    
[led_effect frame_idle]
autostart:              false
frame_rate:             24
leds:
    neopixel:neo
layers:
     breathing  20 1 top (1,0,0,0)
#    breathing  10 1 top (0.0, 0.0, 0.0),(1.0, 0.0, 0.0),(1.0, 1.0, 0.0),(1.0, 1.0, 1.0)
#    HeaterFire  .5 0 screen (0,.1,1), (0,1,.5), (0, 1,1), (0,.1,.5)
#    static     1 0 bottom (1,.1,0), (1,.1,0), (1,.1,0), (1,1,0)

[led_effect critical_error]
leds:
    neopixel:neo

layers:
    strobe         1  1.5   add        (1.0,  1.0, 1.0)
    breathing      2  0     difference (0.95, 0.0, 0.0)
    static         1  0     top        (1.0,  0.0, 0.0)
autostart:                             false
frame_rate:                            24
run_on_error:                          true

[led_effect progress_bar]
leds:
    neopixel:neo
autostart:                          true
frame_rate:                         24
layers:
    progress  -1  0 add         ( 0, 0,   1),( 0, 0.1, 0.6)
    static     0  0 top         ( 0, 0, 0.1)

[safe_z_home]
home_xy_position: 120,100
speed: 40
z_hop: 25
z_hop_speed: 5

[bltouch]
sensor_pin: ^PC14
control_pin: PA1
x_offset: 40
y_offset: 20
#z_offset: 2
#set_output_mode: 5V
probe_with_touch_mode: true
pin_up_touch_mode_reports_triggered: FALSE

[bed_screws]
screw1: 32, 36
screw2: 32, 206
screw3: 202, 206
screw4: 202, 36

[skew_correction]

##--------------FILAMENT SENSOR MACRO ADD-------------------------------------------------------------------------------------------------------------------------------------###

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    {% if s != 0 %}
        M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}       ; Wait for hotend temp (within 1 degree)
    {% endif %}
[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    {% if s != 0 %}
        M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}      ; Wait for bed temp (within 1 degree)
    {% endif %}
    
[filament_switch_sensor trianglelab]
pause_on_runout: True
switch_pin: ^!PC15
insert_gcode:
    M117 Insert Detected
runout_gcode:
    M117 Runout Detected
    #LCDRGB R=1 G=0 B=0  # Turn LCD red
    #BEEP I=12

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=trianglelab ENABLE=0


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=trianglelab ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        ;SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        SET_IDLE_TIMEOUT TIMEOUT=86400                                                       ; set timeout to 24 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=trianglelab ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

##----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------###



[bed_mesh]
speed: 200
horizontal_move_z: 8
mesh_min: 41, 30
mesh_max: 195, 220
probe_count: 5
fade_start: 0
mesh_pps: 2, 2
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 5
split_delta_z: .025

[input_shaper]
shaper_freq_x: 43
shaper_freq_y: 37
shaper_type: mzv
 
[gcode_macro G29]
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_OUTPUT

[virtual_sdcard]
path:  /home/adyan/printer_data/gcodes

[display]
lcd_type: emulated_st7920
en_pin: EXP1_7
spi_software_sclk_pin: EXP1_6
spi_software_mosi_pin: EXP1_8
spi_software_miso_pin: TFT_RX
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

[display_status]

[pause_resume]

# [gcode_macro FILAMENT_RUNOUT]
# gcode:
#   M300 S1 P10
#   M600
#   M300 S1 P10

[gcode_macro M300]
gcode:
  {% set S = params.S|default(1000)|int %}
  {% set P = params.P|default(100)|int %}
#     SET_PIN PIN=BEEPER VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
  G4 P{P}
#     SET_PIN PIN=BEEPER VALUE=0

[gcode_macro M600]
gcode:
  {% set X = params.X|default(25)|float %}
  {% set Y = params.Y|default(25)|float %}
  {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
  G91
  G1 E-.8 F2700
  G1 Z{Z}
  G90
  G1 X{X} Y{Y} F3000
  G91
  G1 E-15 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT


[pause_resume]
recover_velocity: 50
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

[respond]
#default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

#-------------------------------------------------------------------------




# See the sample-lcd.cfg file for definitions of common LCD displays.

[include moonraker_obico_macros.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.049
#*# pid_ki = 1.205
#*# pid_kd = 100.876
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.615000, 0.630000, 0.447500, 0.217500, -0.082500
#*# 	  1.002500, 0.755000, 0.552500, 0.347500, 0.057500
#*# 	  1.030000, 0.825000, 0.600000, 0.397500, 0.137500
#*# 	  1.152500, 0.950000, 0.762500, 0.540000, 0.270000
#*# 	  1.177500, 1.040000, 0.910000, 0.750000, 0.482500
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 41.0
#*# max_x = 195.0
#*# min_y = 30.009999999999998
#*# max_y = 220.0
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 67.482
#*# pid_ki = 0.887
#*# pid_kd = 1283.003
#*#
#*# [bltouch]
#*# z_offset = 2.010
#*#
#*# [skew_correction my_skew_profile]
#*# xy_skew = -0.01342344831962959
#*# xz_skew = 0.0
#*# yz_skew = 0.0
